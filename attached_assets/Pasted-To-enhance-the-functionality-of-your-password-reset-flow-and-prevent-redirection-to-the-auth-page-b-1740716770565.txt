To enhance the functionality of your password reset flow and prevent redirection to the /auth page before the user completes their password reset, you'll need to update your logic in the ResetPasswordPage component located in reset-password.tsx.

Hereâ€™s how you can modify the existing code:

Remove the automatic redirect for the logged-in user when reaching the password reset page.
Implement a handler for successful password update that redirects to the /auth page afterward.
Here's the updated code:

import { ResetPasswordForm } from "@/components/auth-forms";
import { Card } from "@/components/ui/card";
import { useAuth } from "@/hooks/use-auth";
import { Redirect, useLocation } from "wouter";
import { useEffect, useState } from 'react';
export default function ResetPasswordPage() {
  const { user } = useAuth();
  const [location] = useLocation();
  const token = new URLSearchParams(location.split('?')[1]).get('token');
  const [isPasswordResetSuccessful, setIsPasswordResetSuccessful] = useState(false);
  console.log("[ResetPasswordPage] Initializing with:", {
    hasUser: !!user,
    currentUrl: window.location.href,
    hasToken: !!token,
    location
  });
  // Redirect to auth page if user successfully resets their password
  useEffect(() => {
    if (isPasswordResetSuccessful) {
      console.log("[ResetPasswordPage] Password reset successful, redirecting to auth");
      window.location.href = "/auth";
    }
  }, [isPasswordResetSuccessful]);
  if (user) {
    console.log("[ResetPasswordPage] User already logged in, you cannot reset your password.");
    return <div>You are already logged in.</div>;
  }
  if (!token) {
    console.log("[ResetPasswordPage] No token found, you cannot reset your password.");
    return <div>No token found. Please check your reset link.</div>;
  }
  return (
    <div className="min-h-screen grid grid-cols-1 md:grid-cols-2">
      <div className="flex items-center justify-center p-8">
        <Card className="w-full max-w-md p-6">
          <h1 className="text-2xl font-bold mb-6">Set New Password</h1>
          <ResetPasswordForm token={token} onSuccess={() => setIsPasswordResetSuccessful(true)} />
        </Card>
      </div>
      <div className="hidden md:flex flex-col justify-center p-8 bg-gradient-to-br from-primary/90 to-primary text-primary-foreground">
        <div className="max-w-md mx-auto">
          <h2 className="text-4xl font-bold mb-4">Almost There!</h2>
          <p className="text-lg opacity-90">
            Create a new password for your account. Make sure it's secure and unique.
          </p>
        </div>
      </div>
    </div>
  );
}
Changes Explained:
State Management: Introduced a local state (isPasswordResetSuccessful) to track if the password reset was successful.
Redirect Handling: Used useEffect to handle the redirect once the password reset is confirmed.
Conditional Rendering: The redirect to /auth will only happen after successfully updating the password. Ensure to pass an onSuccess callback to ResetPasswordForm, which sets isPasswordResetSuccessful to true upon successful password reset.
Make sure that in your ResetPasswordForm component, when the password reset is successful, you'll call the onSuccess prop.

This enhances the workflow by ensuring the user experiences the intended reset flow and is only redirected to the login page after successfully completing the password reset.